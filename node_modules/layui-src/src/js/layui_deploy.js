// layui.use(['layer','form'],function () {
//     var layer=layui.layer,form=layui.form;
//       layer.msg('hello,world');
// });
layui.use('layer', function(){
    var layer = layui.layer;

    // layer.alert('只想简单的提示');
//     layer.alert('有了回调', function(index){
//         //do something
//
//         layer.close(index);
//     });

    // - 询问框
    // layer.confirm('is not?', {icon: 3, title:'提示'}, function(index){
    //     //do something
    //
    //     layer.close(index);
    // });
    //- 提示框
    // layer.msg('只想弱弱提示');
    // layer.msg('有表情地提示', {icon: 6});
    // layer.msg('同上', {
    //     icon: 1,
    //     time: 2000 //2秒关闭（如果不配置，默认是3秒）
    // }, function(){
    //     //do something
    // });

    // - 加载层
    // var index = layer.load();
    // var index = layer.load(1); //换了种风格
    // var index = layer.load(2, {time: 10*1000}); //又换了种风格，并且设定最长等待10秒
    // layer.tips('只想提示地精准些', '#id');


});



layui.use('jquery', function(){
    var $ = layui.$ //重点处
    //后面就跟你平时使用jQuery一样

    // $('#id').on('click', function(){
    //     var that = this;
    //     layer.tips('只想提示地精准些', that); //在元素的事件回调体中，follow直接赋予this即可
    // });


});

layui.use(['layer','form','jquery'],function () {
    var layer=layui.layer,form=layui.form,$ = layui.$;
      // layer.msg('hello,world');
    // $('#id').on('click', function(){
    //     var that = this;
    //     layer.tips('只想提示地精准些', that); //在元素的事件回调体中，follow直接赋予this即可
    // });
    // var index = layer.load();
    //- 输入层
    // layer.prompt(function(value, index, elem){
    //     alert(value); //得到value
    //     layer.close(index);
    // });

    // layer.prompt({
    //     formType: 2,
    //     value: '初始值',
    //     title: '请输入值',
    //     area: ['800px', '350px'] //自定义文本域宽高
    // }, function(value, index, elem){
    //     alert(value); //得到value
    //     layer.close(index);
    // });
//- tab层
//     layer.tab({
//         area: ['600px', '300px'],
//         tab: [{
//             title: 'TAB1',
//             content: '内容1'
//         }, {
//             title: 'TAB2',
//             content: '内容2'
//         }, {
//             title: 'TAB3',
//             content: '内容3'
//         }]
//     });


//最原始的
//     layer.open ({
//         type : 1,
//         title : '测试',
//         id: 'myp',
//         btn: ['确认','删除'],
//         area: ['420px', '240px'], //宽高
//         content : '<div style="padding: 50px; line-height: 22px; background-color: #393D49; color: #fff; font-weight: 300;"><input type="te" />你知道吗？亲！<br>layer ≠ layui<br><br>layer只是作为Layui的一个弹层模块，由于其用户基数较大，所以常常会有人以为layui是layerui<br><br>layer虽然已被 Layui 收编为内置的弹层模块，但仍然会作为一个独立组件全力维护、升级。<br><br>我们此后的征途是星辰大海 ^_^</div>',
//         success : function (layero,index) {
//             var btn = layero.find('.layui-layer-btn0');
//             console.log(btn)
//         },
//         yes: function(index, layero){
//             console.log(index)
//             layer.close(index); //如果设定了yes回调，需进行手工关闭
//         },
//         cancel: function(){
//             layer.msg('捕获就是从页面已经存在的元素上，包裹layer的结构', {time: 5000, icon:6});
//         }
//     })

    //全局使用。即所有弹出层都默认采用，但是单个配置skin的优先级更高
    // layer.config({
    //     skin: 'demo-class'
    // })

    //单个使用
    // layer.open({
    //     type: 1,
    //     skin: 'demo-class',
    //     content: '传入任意的文本或html' //这里content是一个普通的String
    // });

    // layer.open({
    //     type: 1,
    //     content: $('#id') //这里content是一个DOM，注意：最好该元素要存放在body最外层，否则可能被其它的相对元素所影响
    // });

    //Ajax获取
    // $.post('url', {}, function(str){
    //     layer.open({
    //         type: 1,
    //         content: str //注意，如果str是object，那么需要字符拼接。
    //     });
    // });

    //如果是iframe层
    // layer.open({
    //     type: 2,
    //     content: 'http://sentsin.com' //这里content是一个URL，如果你不想让iframe出现滚动条，你还可以content: ['http://sentsin.com', 'no']
    // });

    //执行tips层
    // layer.open({
    //     type: 4,
    //     content: ['内容', '#id'] //数组第二项即吸附元素选择器或者DOM
    // });
    //layer.alert('酷毙了', {icon: 1});

    // layer.msg('不开心。。', {icon: 5});

    // layer.load(1); //风格1的加载

    // layer.confirm('纳尼？', {
    //     btn: ['按钮一', '按钮二', '按钮三'] //可以无限个按钮
    //     ,btn3: function(index, layero){
    //         console.log("btn3")
    //         //按钮【按钮三】的回调
    //     }
    // }, function(index, layero){
    //     //按钮【按钮一】的回调
    // }, function(index){
    //     //按钮【按钮二】的回调
    // });

    layer.open({
        content: 'test'
        ,btn: ['按钮一', '按钮二', '按钮三']
        ,yes: function(index, layero){
            //按钮【按钮一】的回调
        }
        ,btn2: function(index, layero){
            //按钮【按钮二】的回调

            //return false 开启该代码可禁止点击该按钮关闭
        }
        ,btn3: function(index, layero){
            //按钮【按钮三】的回调

            //return false 开启该代码可禁止点击该按钮关闭
        }
        ,cancel: function(){
            //右上角关闭回调

            //return false 开启该代码可禁止点击该按钮关闭
        }
    });


});

